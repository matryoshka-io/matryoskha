const mongoose = require('mongoose');

// This model doubles as both a Post and a Comment.
// If it's a top-level comment, its parent is a Post, and it has no Sub property, title property, type property, and so on.
// If it's a Post, it has no parent and its Sub property is not-empty, its title and type properties are not-empty, and so on.
// If it's a nested comment, its parent is another Comment and it has no Sub property, and so on.
// Etc.

// The unique ID for a Post/Comment will be MongoDB's default _id, autogenerated.
const postSchema = mongoose.Schema({
  sub: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Sub',
  }, // Unique ID of the Sub to which the Post belongs.
  title: String, // Title of the Post.
  type: String, // Type of the Post, e.g. Video, Image (e.g. an IMGUR link), Text
  body: String, // Body of the Post/Comment, if applicable.
  author: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
  }, // Unique ID of the User to which this Post/Comment belongs.
  date: {
    type: Date,
    default: Date.now,
  }, // Self-explanatory.
  comment: Boolean, // If true, this Post is a Comment.
  parent: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Post',
  }, // See above for top-level Comments, vs. nested Comments, vs. Posts.
});

const Post = mongoose.model('Post', postSchema);

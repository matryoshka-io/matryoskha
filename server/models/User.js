const mongoose = require('mongoose');
const bcrypt = require('bcrypt');

// The unique ID for a User will be MongoDB's default _id, autogenerated.
const userSchema = mongoose.Schema({
  username: {
    type: String,
    unique: true,
  }, // Username for the User in question, must be unique. Not the "primary key," however.
  password: String,
  salt: String,
  date: {
    type: Date,
    default: Date.now,
  },
  karma: Number, // Cache value for the combined value of upvotes and downvotes for a User's content
});

// userSchema.pre('save', (next) => {
//   const user = this;
//   if (!user.isModified('password')) return next();

//   bcrypt
//     .genSalt(10)
//     .then((salt) => {
//       user.salt = salt;
//       return bcrypt.hash(user.password, salt);
//     })
//     .then((hash) => {
//       user.password = hash;
//       return next();
//     })
//     .catch(err => next(err));
// });

// userSchema.methods.comparePassword = (candidatePassword) => {
//   return new Promise((resolve, reject) => {
//     bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {
//       if (err) return reject(err);
//       return resolve(isMatch);
//     });
//   });
// };

const User = mongoose.model('User', userSchema);

module.exports = User;
